package com.yoi.dalealcoco;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class Preguntas extends SQLiteOpenHelper {
    private static final String DATABASE_NAME = "trivias.db"; // Nombre de tu base de datos
    private static final String DATABASE_PATH = "/data/data/com.yoi.dalealcoco/databases/"; // Ruta de la base de datos
    private Context context;

    public Preguntas(Context context) {
        super(context, DATABASE_NAME, null, 1); // Llamamos al constructor de SQLiteOpenHelper
        this.context = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // Aquí puedes crear las tablas si es necesario
        // Sin embargo, si ya tienes una base de datos pre-poblada, no es necesario hacer nada aquí
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Lógica para actualizar la base de datos si es necesario
    }

    public void copyDatabase() {
        // Verifica si la base de datos ya existe para evitar sobrescribirla
        String outFileName = DATABASE_PATH + DATABASE_NAME;
        Log.d("Consola", "outFileName: "+outFileName);
        if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED)) {
            // Verificamos si la base de datos ya existe
            if (!checkDatabase()) {
                try {
                    // Crear la carpeta si no existe
                    File directory = new File(DATABASE_PATH);
                    if (!directory.exists()) {
                        directory.mkdirs();
                    }

                    // Copiar la base de datos desde assets
                    InputStream input = context.getAssets().open(DATABASE_NAME);
                    OutputStream output = new FileOutputStream(outFileName);

                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = input.read(buffer)) > 0) {
                        output.write(buffer, 0, length);
                    }

                    output.flush();
                    output.close();
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    // Verifica si la base de datos ya existe
    private boolean checkDatabase() {
        SQLiteDatabase checkDB = null;
        try {
            String dbPath = DATABASE_PATH + DATABASE_NAME;
            checkDB = SQLiteDatabase.openDatabase(dbPath, null, SQLiteDatabase.OPEN_READONLY);
        } catch (SQLiteException e) {
            // La base de datos no existe
        }

        if (checkDB != null) {
            checkDB.close();
        }
        return checkDB != null;
    }

    // Método para obtener la base de datos y realizar consultas
    public SQLiteDatabase getReadableDatabase() {
        return super.getReadableDatabase();
    }
    public String obtenerPreguntas(){
        SQLiteDatabase db = this.getReadableDatabase();
        String preguntas = "";
        // Consulta SQL para seleccionar todas las preguntas
        String query = "SELECT * FROM preguntas";
        Cursor cursor = db.rawQuery(query, null); // Ejecutamos la consulta
        int id = cursor.getColumnIndex("id");
        int pregunta = cursor.getColumnIndex("pregunta");
        int respuesta = cursor.getColumnIndex("respuesta");

        for (cursor.moveToNext(); !cursor.isAfterLast(); cursor.moveToNext()){
            preguntas += cursor.getString(id)+" - ";
            preguntas += cursor.getString(pregunta)+" - ";
            preguntas += cursor.getString(respuesta)+"\n";
        }
        cursor.close(); // Es importante cerrar el cursor después de usarlo

        return preguntas;
    }
}
